/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Shape } from "./Shape";
import { ShapeCountArgs } from "./ShapeCountArgs";
import { ShapeFindManyArgs } from "./ShapeFindManyArgs";
import { ShapeFindUniqueArgs } from "./ShapeFindUniqueArgs";
import { CreateShapeArgs } from "./CreateShapeArgs";
import { UpdateShapeArgs } from "./UpdateShapeArgs";
import { DeleteShapeArgs } from "./DeleteShapeArgs";
import { Image } from "../../image/base/Image";
import { User } from "../../user/base/User";
import { ShapeInput } from "../ShapeInput";
import { ShapeService } from "../shape.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Shape)
export class ShapeResolverBase {
  constructor(
    protected readonly service: ShapeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Shape",
    action: "read",
    possession: "any",
  })
  async _shapesMeta(
    @graphql.Args() args: ShapeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Shape])
  @nestAccessControl.UseRoles({
    resource: "Shape",
    action: "read",
    possession: "any",
  })
  async shapes(@graphql.Args() args: ShapeFindManyArgs): Promise<Shape[]> {
    return this.service.shapes(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Shape, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Shape",
    action: "read",
    possession: "own",
  })
  async shape(
    @graphql.Args() args: ShapeFindUniqueArgs
  ): Promise<Shape | null> {
    const result = await this.service.shape(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Shape)
  @nestAccessControl.UseRoles({
    resource: "Shape",
    action: "create",
    possession: "any",
  })
  async createShape(@graphql.Args() args: CreateShapeArgs): Promise<Shape> {
    return await this.service.createShape({
      ...args,
      data: {
        ...args.data,

        image: args.data.image
          ? {
              connect: args.data.image,
            }
          : undefined,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Shape)
  @nestAccessControl.UseRoles({
    resource: "Shape",
    action: "update",
    possession: "any",
  })
  async updateShape(
    @graphql.Args() args: UpdateShapeArgs
  ): Promise<Shape | null> {
    try {
      return await this.service.updateShape({
        ...args,
        data: {
          ...args.data,

          image: args.data.image
            ? {
                connect: args.data.image,
              }
            : undefined,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Shape)
  @nestAccessControl.UseRoles({
    resource: "Shape",
    action: "delete",
    possession: "any",
  })
  async deleteShape(
    @graphql.Args() args: DeleteShapeArgs
  ): Promise<Shape | null> {
    try {
      return await this.service.deleteShape(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Image, {
    nullable: true,
    name: "image",
  })
  @nestAccessControl.UseRoles({
    resource: "Image",
    action: "read",
    possession: "any",
  })
  async getImage(@graphql.Parent() parent: Shape): Promise<Image | null> {
    const result = await this.service.getImage(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: Shape): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => String)
  async DrawShapeOnImage(
    @graphql.Args()
    args: ShapeInput
  ): Promise<string> {
    return this.service.DrawShapeOnImage(args);
  }
}
