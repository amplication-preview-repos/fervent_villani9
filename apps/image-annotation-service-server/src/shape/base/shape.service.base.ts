/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Shape as PrismaShape,
  Image as PrismaImage,
  User as PrismaUser,
} from "@prisma/client";
import { ShapeInput } from "../ShapeInput";

export class ShapeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ShapeCountArgs, "select">): Promise<number> {
    return this.prisma.shape.count(args);
  }

  async shapes(args: Prisma.ShapeFindManyArgs): Promise<PrismaShape[]> {
    return this.prisma.shape.findMany(args);
  }
  async shape(args: Prisma.ShapeFindUniqueArgs): Promise<PrismaShape | null> {
    return this.prisma.shape.findUnique(args);
  }
  async createShape(args: Prisma.ShapeCreateArgs): Promise<PrismaShape> {
    return this.prisma.shape.create(args);
  }
  async updateShape(args: Prisma.ShapeUpdateArgs): Promise<PrismaShape> {
    return this.prisma.shape.update(args);
  }
  async deleteShape(args: Prisma.ShapeDeleteArgs): Promise<PrismaShape> {
    return this.prisma.shape.delete(args);
  }

  async getImage(parentId: string): Promise<PrismaImage | null> {
    return this.prisma.shape
      .findUnique({
        where: { id: parentId },
      })
      .image();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.shape
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
  async DrawShapeOnImage(args: ShapeInput): Promise<string> {
    throw new Error("Not implemented");
  }
}
